package com.swcir.swcirsystem.Controllers;

import java.util.NoSuchElementException;

import com.swcir.swcirsystem.Models.User;
import com.swcir.swcirsystem.Repositories.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path="/find/all")
    public Iterable<User> getAllUsers(){
        Iterable<User> listUsers = this.userRepository.findAll();

        if (listUsers == null) {
            throw new EmptyResultDataAccessException("Nenhum usuario encontrado", 1);
        }

        return listUsers;
    }

    @GetMapping(path="/find/{userId}")
    public User getUserById(@PathVariable int userId){
        
        User userRecovered = new User();

        try {
            userRecovered = this.userRepository.findById(userId).get();
        } catch (NoSuchElementException e) {
            throw new EmptyResultDataAccessException("NÃ£o existe usuario com o ID informado", 1);
        }
        return userRecovered;
    }
    @ResponseBody
    @CrossOrigin
    @RequestMapping(value = "/add", method = RequestMethod.POST, consumes = "application/json") // Map ONLY POST Requests
    public User addNewUser (@RequestBody User user){ 
        // // @RequestParam means it is a parameter from the GET or POST request    
        User userRegistered = this.userRepository.findUserByEmail(user.getEmail()); 

        if (userRegistered != null){
            throw new EmptyResultDataAccessException("Usuario ja cadastrado.", 1);
        }
        
        /*User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setPassword(password);*/
        userRepository.save(user);
        return user;
    } 

    @PutMapping(path="/edit/{userId}")
        public ResponseEntity<?> updateUserById(@PathVariable("userId") int userId, @RequestBody User user) {
              
            return userRepository.findById(userId).map(record->{
                record.setName(user.getName());
                record.setEmail(user.getEmail());
                record.setPassword(user.getPassword());
                User updUser = userRepository.save(record);
                return ResponseEntity.ok().body(updUser);
            }).orElse(ResponseEntity.notFound().build());  
        } 

    @DeleteMapping(path="/delete/{userId}")
    public String deleteUserById(@PathVariable int userId){

        User userToBeDeleted = new User();
        userToBeDeleted = this.getUserById(userId);

        if(userToBeDeleted == null){
            throw new EmptyResultDataAccessException("Usuario nao encontrado", 1);
        }

        userRepository.deleteById(userId);
        return "User " + userId + " has been deleted.";
    }
}